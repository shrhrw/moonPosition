/******************************************************************************
 * Copyright (c) 2021 ispace technologies US
 *
 * Reference(s):
 * (1) Meeus,Jean."Astronomical Algorithms",
 * 2nd Edition, Willmann-Bell, Inc.
 * Chapter 22. (Nutation and the Obliquity of the Ecliptic)
 * Chapter 47. (Position of the Moon)
 ******************************************************************************
*/

#ifndef __MOON_POS_H__
#define __MOON_POS_H__

#include <stdio.h>
#include <math.h>
#include "JD.h"


class MoonPosition {

    /*!************************************************************************
     * Member Types
     * ***********************************************************************/
    public:
    protected:
    private:

    /*!************************************************************************
     * Member Functions
     * ***********************************************************************/
    public:

        MoonPosition();

        ~MoonPosition();

        /*!****************************************************************************
         * 
         * @brief Calculate Dynamic Time from Julian Ephemeris Day (JDE)
         *
         ******************************************************************************/
        void CalcDynamicTime();

        /*!****************************************************************************
         * 
         * @brief Reduce cyclical value to simplest form
         *
         ******************************************************************************/
        double Reduce( double value );

        /*!****************************************************************************
         * 
         * @brief Calculates Mean Longitude of Moon
         *
         ******************************************************************************/
        void CalcMoonMeanLongitude();

        /*!****************************************************************************
         * 
         * @brief Calculates Mean Elongation of Moon
         *
         ******************************************************************************/
        void CalcMoonMeanElongation();

        /*!****************************************************************************
         * 
         * @brief Calculates Mean Anomaly of Sun
         *
         ******************************************************************************/
        void CalcSunMeanAnomaly();

        /*!****************************************************************************
         * 
         * @brief Calculates Mean Anomaly of Moon
         *
         ******************************************************************************/
        void CalcMoonMeanAnomaly();

        /*!****************************************************************************
         * 
         * @brief Calculate Argument of Latitude of Moon
         *
         ******************************************************************************/
        void CalcMoonArgumentOfLatitude();

        /*!****************************************************************************
         * 
         * @brief Calculate Action of Venus
         *
         ******************************************************************************/
        void CalcActionOfVenus();

        /*!****************************************************************************
         * 
         * @brief Calculate Action of Jupiter
         *
         ******************************************************************************/
        void CalcActionOfJupiter();

        /*!****************************************************************************
         * 
         * @brief Calculate Action of Something
         *
         ******************************************************************************/
        void CalcActionOfSomething();

        /*!****************************************************************************
         * 
         * @brief Calculate Eccentricity of Earth
         *
         ******************************************************************************/
        void CalcEarthEccentricity();

        /*!****************************************************************************
         * 
         * @brief Reinitialize stored member variables to prepare for next iteration
         *
         ******************************************************************************/
        void Reinitialize();
        
        /*!****************************************************************************
         * 
         * @brief Perform integration of all variables to determine position
         *
         ******************************************************************************/
        void Iterate();

        /*!****************************************************************************
         * 
         * @brief Perform integration of all variables to determine position
         *
         ******************************************************************************/
        void Integrate();

        /*!****************************************************************************
         * 
         * @brief Display current Moon Position to console
         *
         ******************************************************************************/
        void PrintCurrentPosition();

        /*!****************************************************************************
         * 
         * @brief Display to console final Moon Position
         *
         ******************************************************************************/
        void Shutdown();

    public:

        /*!****************************************************************************
         * Dynamic Member variables
         ******************************************************************************/
        double longitudeIntegrated;
        double latitudeIntegrated;
        double earthToMoonRadius;
        double dynamicalTime;
        double earthEccentricity;
        double actionOfVenus;
        double actionOfJupiter;
        double actionOfSomething;
        double moonMeanElongation;
        double moonMeanLongitude;
        double moonArgumentOfLatitude;
        double moonMeanAnomaly;
        double sunMeanAnomaly;
        double geocentricLongitude;
        double geocentricLatitude;
        double earthToMoonDistance;
        double julianEphemerisDay;
        double cartesianCoordinates[3];

    protected:
    private:

        /*!****************************************************************************
         * Static Member Variables
         ******************************************************************************/

        static constexpr double DYNAMIC_TIME_COEFFS[2] = { 2451545, 36525 };
        static constexpr double MOON_MEAN_LONGITUDE_COEFFS[5] = { 218.3164477, 481267.88123421, 0.0015786, 1/538841, 1/65194000 };
        static constexpr double MOON_MEAN_ELONGATION_COEFFS[5] = { 297.8501921, 445267.1114034, 0.0018819, 1/545868, 1/113065000 };
        static constexpr double SUN_MEAN_ANOMALY_COEFFS[4] = { 357.5291092, 35999.0502909, 0.0001536, 1/24490000 };
        static constexpr double MOON_MEAN_ANOMALY_COEFFS[5] = { 134.9633964, 477198.8675055, 0.0087414, 1/69699, 1/14712000 };
        static constexpr double MOON_ARG_OF_LATITUDE_COEFFS[5] = { 93.2720950, 483202.0175233, 0.0036539, 1/3526000, 1/863310000 };
        static constexpr double ACTION_OF_VENUS_COEFFS[2] = { 119.75, 131.849 };
        static constexpr double ACTION_OF_JUPITER_COEFFS[2] = { 53.09, 479264.290 };
        static constexpr double ACTION_OF_SOMETHING_COEFFS[2] = { 313.45, 481266.484 };
        static constexpr double EARTH_ECCENTRICITY_COEFFS[3] = { 1, 0.002516, 0.0000074 };
        static constexpr double LONGITUDE_ADDITIVE_COEFFS[3] = { 3958.0, 1962.0, 318.0 };
        static constexpr double LATITUDE_ADDITIVE_COEFFS[6] = { 2235.0, 382.0, 175.0, 175.0, 127.0, 115.0 };

        static constexpr double LONGITUDE_PERIODIC_TERM_MATRIX[60][4] = {
            { 0.0, 0.0, 1.0, 0.0 }, 
            { 2.0, 0.0, -1.0, 0.0 },
            { 2.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 2.0, 0.0 },
            { 0.0, 1.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 2.0 },
            { 2.0, 0.0, -2.0, 0.0 },
            { 2.0, -1.0, -1.0, 0.0 },
            { 2.0, 0.0, 1.0, 0.0 },
            { 2.0, -1.0, 0.0, 0.0 },
            { 0.0, 1.0, -1.0, 0.0 },
            { 1.0, 0.0, 0.0, 0.0 },
            { 0.0, 1.0, 1.0, 0.0 },
            { 2.0, 0.0, 0.0, -2.0 },
            { 0.0, 0.0, 1.0, 2.0 },
            { 0.0, 0.0, 1.0, -2.0 },
            { 4.0, 0.0, -1.0, 0.0 },
            { 0.0, 0.0, 3.0, 0.0 },
            { 4.0, 0.0, -2.0, 0.0 },
            { 2.0, 1.0, -1.0, 0.0 },
            { 2.0, 1.0, 0.0, 0.0 },
            { 1.0, 0.0, -1.0, 0.0 },
            { 1.0, 1.0, 0.0, 0.0 },
            { 2.0, -1.0, 1.0, 0.0 },
            { 2.0, 0.0, 2.0, 0.0 },
            { 4.0, 0.0, 0.0, 0.0 },
            { 2.0, 0.0, -3.0, 0.0 },
            { 0.0, 1.0, -2.0, 0.0 },
            { 2.0, 0.0, -1.0, 2.0 },
            { 2.0, -1.0, -2.0, 0.0 },
            { 1.0, 0.0, 1.0, 0.0 },
            { 2.0, -2.0, 0.0, 0.0 },
            { 0.0, 1.0, 2.0, 0.0 },
            { 0.0, 2.0, 0.0, 0.0 },
            { 2.0, -2.0, -1.0, 0.0 },
            { 2.0, 0.0, 1.0, -2.0 },
            { 2.0, 0.0, 0.0, 2.0 },
            { 4.0, -1.0, -1.0, 0.0 },
            { 0.0, 0.0, 2.0, 2.0 },
            { 3.0, 0.0, -1.0, 0.0 },
            { 2.0, 1.0, 1.0, 0.0 },
            { 4.0, -1.0, -2.0, 0.0 },
            { 0.0, 2.0, -1.0, 0.0 },
            { 2.0, 2.0, -1.0, 0.0 },
            { 2.0, 1.0, -2.0, 0.0 },
            { 2.0, -1.0, 0.0, -2.0 },
            { 4.0, 0.0, 1.0, 0.0 },
            { 0.0, 0.0, 4.0, 0.0 },
            { 4.0, -1.0, 0.0, 0.0 },
            { 1.0, 0.0, -2.0, 0.0 },
            { 2.0, 1.0, 0.0, -2.0 },
            { 0.0, 0.0, 2.0, -2.0 },
            { 1.0, 1.0, 1.0, 0.0 },
            { 3.0, 0.0, -2.0, 0.0 },
            { 4.0, 0.0, -3.0, 0.0 },
            { 2.0, -1.0, 2.0, 0.0 },
            { 0.0, 2.0, 1.0, 0.0 },
            { 1.0, 1.0, -1.0, 0.0 },
            { 2.0, 0.0, 3.0, 0.0 },
            { 2.0, 0.0, -1.0, -2.0 }
        };

        static constexpr double LATITUDE_PERIODIC_TERM_MATRIX[60][4] = {
            { 0.0, 0.0, 0.0, 1.0 }, { 0.0, 0.0, 1.0, 1.0 }, { 0.0, 0.0, 1.0, -1.0 }, { 2.0, 0.0, 0.0, -1.0 }, { 2.0, 0.0, -1.0, 1.0 },
            { 2.0, 0.0, -1.0, -1.0 }, { 2.0, 0.0, 0.0, 1.0 }, { 0.0, 0.0, 2.0, 1.0 }, { 2.0, 0.0, 1.0, -1.0 }, { 0.0, 0.0, 2.0, -1.0 },
            { 2.0, -1.0, 0.0, -1.0 }, { 2.0, 0.0, -2.0, 1.0 }, { 2.0, 0.0, 1.0, 1.0 }, { 2.0, 1.0, 0.0, -1.0 }, { 2.0, -1.0, -1.0, 1.0 },
            { 2.0, -1.0, 0.0, 1.0 }, { 2.0, -1.0, -1.0, -1.0 }, { 0.0, 1.0, -1.0, -1.0 }, { 4.0, 0.0, -1.0, -1.0 }, { 0.0, 1.0, 0.0, 1.0 },
            { 0.0, 0.0, 0.0, 3.0 }, { 0.0, 1.0, -1.0, 1.0 }, { 1.0, 0.0, 0.0, 1.0 }, { 0.0, 1.0, 1.0, 1.0 }, { 0.0, 1.0, 1.0, -1.0 },
            { 0.0, 1.0, 0.0, -1.0 }, { 1.0, 0.0, 0.0, -1.0 }, { 0.0, 0.0, 3.0, 1.0 }, { 4.0, 0.0, 0.0, -1.0 }, { 4.0, 0.0, -1.0, 1.0 },
            { 0.0, 0.0, 1.0, -3.0 }, { 4.0, 0.0, -2.0, 1.0 }, { 2.0, 0.0, 0.0, -3.0 }, { 2.0, 0.0, 2.0, -1.0 }, { 2.0, -1.0, 1.0, -1.0 },
            { 2.0, 0.0, -2.0, 1.0 }, { 0.0, 0.0, 3.0, -1.0 }, { 2.0, 0.0, 2.0, 1.0 }, { 2.0, 0.0, -3.0, -1.0 }, { 2.0, 1.0, -1.0, 1.0 },
            { 2.0, 1.0, 0.0, 1.0 }, { 4.0, 0.0, 0.0, 1.0 }, { 2.0, -1.0, 1.0, 1.0 }, { 2.0, -2.0, 0.0, -1.0 }, { 0.0, 0.0, 1.0, 3.0 },
            { 2.0, 1.0, 1.0, 1.0 }, { 1.0, 1.0, 0.0, -1.0 }, { 1.0, 1.0, 0.0, 1.0 }, { 0.0, 1.0, -2.0, -1.0 }, { 2.0, 1.0, -1.0, -1.0 },
            { 1.0, 0.0, 1.0, 1.0 }, { 2.0, -1.0, -2.0, -1.0 }, { 0.0, 1.0, 2.0, 1.0 }, { 4.0, 0.0, -2.0, -1.0 }, { 4.0, -1.0, -1.0, -1.0 },
            { 1.0, 0.0, 1.0, -1.0 }, { 4.0, 0.0, 1.0, -1.0 }, { 1.0, 0.0, -1.0, -1.0 }, { 4.0, -1.0, 0.0, -1.0 }, { 2.0, -2.0, 0.0, 1.0 }
        };

        static constexpr double LONGITUDE_SINE_COEFF[60] = {
             6288774.0, 1274027.0, 658314.0, 213618.0, -185116.0, -114332.0, 58793.0, 57066.0, 53322.0, 45758.0,
             -40923.0, -34720.0, -30383.0, 15327.0, -12528.0, 10980.0, 10675.0, 10034.0, 8548.0, -7888.0,
             -6766.0, -5163.0, 4987.0, 4036.0, 3994.0, 3861.0, 3665.0, -2689.0, -2602.0, 2390.0,
             -2348.0, 2236.0, -2120.0, -2069.0, 2048.0, -1773.0, -1595.0, 1215.0, -1110.0, -892.0,
             -810.0, 759.0, -713.0, -700.0, 691.0, 596.0, 549.0, 537.0, 520.0, -487.0,
             -399.0, -381.0, 351.0, -340.0, 330.0, 327.0, -323.0, 299.0, 294.0, 0.0
        };

        static constexpr double LONGITUDE_COSINE_COEFF[60] = {
             -20905355.0, -3699111.0, -2955968.0, -569925.0, 48888.0, -3149.0, 246158.0, -152138.0, -170733.0, -204586.0,
             -129620.0, 108743.0, 104755.0, 10321.0, 0.0, 79661.0, -34782.0, -23210.0, -21636.0, 24208.0,
             30824.0, -8379.0, -16675.0, -12831.0, -10445.0, -11650.0, 14403.0, -7003.0, 0.0, 10056.0,
             6322.0, -9884.0, 5751.0, 0.0, -4950.0, 4130.0, 0.0, -3958.0, 0.0, 3258.0,
             2616.0, -1897.0, -2117.0, 2354.0, 0.0, 0.0,  -1423.0, -1117.0, -1571.0, -1739.0,
             0.0,  -4421.0, 0.0, 0.0, 0.0, 0.0,  1165.0, 0.0, 0.0, 8752.0
        };

        static constexpr double LATITUDE_SINE_COEFF[60] = {
            { 5128122.0 }, { 280602.0 }, { 277693.0 }, { 173237.0 }, { 55413.0 }, { 46271.0 }, { 32573.0 }, { 17198.0 }, { 9266.0 }, { 8822.0 },
            { 8216.0 }, { 4324.0 }, { 4200.0 }, { -3359.0 }, { 2463.0 }, { 2211.0 }, { 2065.0 }, { -1870.0 }, { 1828.0 }, { -1794.0 },
            { -1749.0 }, { -1565.0 }, { -1491.0 }, { -1475.0 }, { -1410.0 }, { -1344.0 }, { -1335.0 }, { 1107.0 }, { 1021.0 }, { 833.0 },
            { 777.0 }, { 671.0 }, { 607.0 }, { 596.0 }, { 491.0 }, { -451.0 }, { 439.0 }, { 422.0 }, { 421.0 }, { -366.0 },
            { -351.0 }, { 331.0 }, { 315.0 }, { 302.0 }, { -283.0 }, { -229.0 }, { 223.0 }, { 223.0 }, { -220.0 }, { -220.0 },
            { -185.0 }, { 181.0 }, { -177.0 }, { 176.0 }, { 166.0 }, { -164.0 }, { 132.0 }, { -119.0 }, { 115.0 }, { 107.0 }
        };

}; // End Class MoonPosition()

#endif // __MOON_POS_H__
